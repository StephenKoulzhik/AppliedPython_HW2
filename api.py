from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import requests
from config import WEATHER_API_KEY

router = Router()

users = dict()


class User(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()


def setup_handlers(dp):
    dp.include_router(router)


@router.message(Command("start"))
async def start(message: Message):
    await message.reply(
        """–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç —Ñ–∏—Ç–Ω–µ—Å –ø–æ–º–æ—â–Ω–∏–∫. –Ø —É–º–µ—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–ª–æ—Ä–∏–π, –≤–æ–¥—ã –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í–æ—Ç –º–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n 
            /set_profile - –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–ª—å—à–µ —è –≤–∞–º –ø–æ–¥—Å–∫–∞–∂—É —á—Ç–æ –≤–≤–æ–¥–∏—Ç—å) \n 
            /log_water <int> - –ó–∞–ø–∏—Å–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª \n
            /log_workout <string> <int> - –ó–∞–ø–∏—Å–∞—Ç—å, –∫–∞–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –∏ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç \n
            /log_food <string> - –ó–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ç—ã —Å—ä–µ–ª. \n
            /check_progress - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω—ã–Ω–µ—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    )

@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–≤–æ–π –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(User.weight)


@router.message(User.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        await state.update_data(weight=weight)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(User.height)
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")


@router.message(User.height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        await state.update_data(height=height)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(User.age)
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")


@router.message(User.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É —Ç–µ–±—è –≤ –¥–µ–Ω—å?")
        await state.set_state(User.activity)
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")


@router.message(User.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        await state.update_data(activity=activity)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è? (–ò–Ω –∏–Ω–≥–ª–∏—à, –ø–ª–∏–∑)")
        await state.set_state(User.city)
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")


@router.message(User.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    data = await state.get_data()

    weight = data['weight']
    activity = data['activity']
    water_goal = int(weight * 30 + 500 * (activity // 30))

    response = requests.get(
        f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric"
    )

    if response.status_code == 200:
        temp = response.json()['main']['temp']
        if temp > 25:
            water_goal += 500

    calorie_goal = int(10 * weight + 6.25 * data['height'] - 5 * data['age'])
    if activity > 50:
        calorie_goal += 300

    user_id = message.from_user.id
    users[user_id] = {
        'weight': weight,
        'height': data['height'],
        'age': data['age'],
        'activity': activity,
        'city': city,
        'water_goal': water_goal,
        'calorie_goal': calorie_goal,
        'logged_water': 0,
        'logged_calories': 0,
        'burnt_calories': 0,
    }

    await state.clear()
    await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
                        f"–¶–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å:\n"
                        f"–í–æ–¥–∞: {water_goal} –º–ª\n"
                        f"–ö–∞–ª–æ—Ä–∏–∏: {calorie_goal} –∫–∫–∞–ª.")


@router.message(Command("log_water"))
async def log_water(message: Message):
    try:
        user_id = message.from_user.id

        if user_id not in users:
            await message.reply("–ô–æ—É, —Ç—ã –∫–∞–∫–æ–π-—Ç–æ –ª–µ–≤—ã–π —á—É–≤–∞–∫... –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é")
            return

        raw_data = message.text.split()

        if len(raw_data) < 2:
            await message.reply("–í–≤–µ–¥–∏, —Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª")
            return

        water_consumed = int(raw_data[1])

        users[user_id]["logged_water"] += water_consumed
        remained_water = users[user_id]["water_goal"] - users[user_id]["logged_water"]

        await message.reply(f"–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å {max(0, remained_water)} –º–ª –≤–æ–¥—ã")

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")


async def process_eaten_food(message: Message, user_id: int, calories_100g: int):
    try:
        quantity = int(message.text)

        total_calories = int((quantity / 100) * calories_100g)

        users[user_id]['logged_calories'] += total_calories
        await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories} –∫–∫–∞–ª.")
    except ValueError:
        await message.reply("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥—Ä–∞–º–º–∞—Ö")


@router.message(Command("log_food"))
async def log_food(message: Message):
    try:
        user_id = message.from_user.id

        if user_id not in users:
            await message.reply("–ô–æ—É, —Ç—ã –∫–∞–∫–æ–π-—Ç–æ –ª–µ–≤—ã–π —á—É–≤–∞–∫... –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é")
            return

        raw_data = message.text.split()

        if len(raw_data) < 2:
            await message.reply("–í–≤–µ–¥–∏ —á—Ç–æ —Ç—ã –µ–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
            return

        food_name = raw_data[1]

        url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={food_name}&json=true"
        response = requests.get(url)
        print(response.status_code)
        if response.status_code == 200:
            data = response.json()
            products = data.get('products', [])
            if products:
                product = products[0]

                calories_per_100g = product.get('nutriments', {}).get('energy-kcal_100g', 0)

                if calories_per_100g is None:
                    await message.reply("–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                    return

                await message.reply(f"{food_name} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —Ç—ã —Å—ä–µ–ª?")

                @router.message()
                async def handle_eaten_food(message: Message):
                    await process_eaten_food(message, user_id, calories_per_100g)

            return None
        print(f"–û—à–∏–±–∫–∞: {response.status_code}")
        return None
    except ValueError:
        await message.reply("–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    try:
        user_id = message.from_user.id

        if user_id not in users:
            await message.reply("–ô–æ—É, —Ç—ã –∫–∞–∫–æ–π-—Ç–æ –ª–µ–≤—ã–π —á—É–≤–∞–∫... –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é")
            return

        raw_data = message.text.split()

        if len(raw_data) < 3:
            await message.reply(
                "–í–≤–µ–¥–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ—É –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>")
            return

        name = raw_data[1]
        workout_duration = int(raw_data[2])

        burnt_calories = workout_duration * 10
        drunk_water = int((workout_duration / 30) * 200)

        users[user_id]["burnt_calories"] += burnt_calories
        users[user_id]["logged_water"] += drunk_water

        await message.reply(
            f"{name} {workout_duration} –º–∏–Ω—É—Ç ‚Äî {burnt_calories} –∫–∫–∞–ª. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞–¥–æ –µ—â–µ –≤—ã–ø–∏—Ç—å {drunk_water} –º–ª –≤–æ–¥—ã.")

    except ValueError:
        await message.reply("–¢—ã –ø–æ –º–æ–µ–º—É –ø–µ—Ä–µ–ø—É—Ç–∞–ª")


@router.message(Command("check_progress"))
async def check_progress(message: Message):
    try:
        user_id = message.from_user.id

        if user_id not in users:
            await message.reply("–ô–æ—É, —Ç—ã –∫–∞–∫–æ–π-—Ç–æ –ª–µ–≤—ã–π —á—É–≤–∞–∫... –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é")
            return

        user = users[user_id]

        reply = f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:" \
                f"\n- –í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª." \
                f"\n- –û—Å—Ç–∞–ª–æ—Å—å: {max(0, user['water_goal'] - user['logged_water'])} –º–ª." \
                f"\n\n–ö–∞–ª–æ—Ä–∏–∏:" \
                f"\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª." \
                f"\n- –°–æ–∂–∂–µ–Ω–æ: {user['burnt_calories']} –∫–∫–∞–ª." \
                f"\n- –ë–∞–ª–∞–Ω—Å: {max(0, user['logged_calories'] - user['burnt_calories'])} –∫–∫–∞–ª."

        await message.reply(reply)

    except ValueError:
        await message.reply("–¢—ã –ø–æ-–º–æ–µ–º—É –ø–µ—Ä–µ–ø—É—Ç–∞–ª")